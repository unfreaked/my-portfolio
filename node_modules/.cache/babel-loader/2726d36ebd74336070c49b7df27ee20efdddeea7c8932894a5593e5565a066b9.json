{"ast":null,"code":"import _objectSpread from \"C:/Users/KIIT/portfolio/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\nimport { cloneStyle, getFullScreenStyle, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\nimport { defaultOpacity, defaultTransformValue, generatedAttribute, inverseFactorNumerator, minimumLength, minimumSize, zIndexFactorOffset } from \"./Utils/Constants.js\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nfunction setTransformValue(factor, newFactor, key) {\n  const newValue = newFactor[key];\n  if (newValue !== undefined) {\n    var _factor$key;\n    factor[key] = ((_factor$key = factor[key]) !== null && _factor$key !== void 0 ? _factor$key : defaultTransformValue) * newValue;\n  }\n}\nfunction setStyle(canvas, style) {\n  let important = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!style) {\n    return;\n  }\n  const element = canvas;\n  if (!element) {\n    return;\n  }\n  const elementStyle = element.style;\n  if (!elementStyle) {\n    return;\n  }\n  const keys = new Set();\n  for (const key in elementStyle) {\n    if (!Object.prototype.hasOwnProperty.call(elementStyle, key)) {\n      continue;\n    }\n    keys.add(elementStyle[key]);\n  }\n  for (const key in style) {\n    if (!Object.prototype.hasOwnProperty.call(style, key)) {\n      continue;\n    }\n    keys.add(style[key]);\n  }\n  for (const key of keys) {\n    const value = style.getPropertyValue(key);\n    if (!value) {\n      elementStyle.removeProperty(key);\n    } else {\n      elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n    }\n  }\n}\nexport class Canvas {\n  constructor(container, engine) {\n    this.container = container;\n    this._applyPostDrawUpdaters = particle => {\n      for (const updater of this._postDrawUpdaters) {\n        var _updater$afterDraw;\n        (_updater$afterDraw = updater.afterDraw) === null || _updater$afterDraw === void 0 || _updater$afterDraw.call(updater, particle);\n      }\n    };\n    this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n      for (const updater of this._preDrawUpdaters) {\n        var _updater$beforeDraw;\n        if (updater.getColorStyles) {\n          const {\n            fill,\n            stroke\n          } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n          if (fill) {\n            colorStyles.fill = fill;\n          }\n          if (stroke) {\n            colorStyles.stroke = stroke;\n          }\n        }\n        if (updater.getTransformValues) {\n          const updaterTransform = updater.getTransformValues(particle);\n          for (const key in updaterTransform) {\n            setTransformValue(transform, updaterTransform, key);\n          }\n        }\n        (_updater$beforeDraw = updater.beforeDraw) === null || _updater$beforeDraw === void 0 || _updater$beforeDraw.call(updater, particle);\n      }\n    };\n    this._applyResizePlugins = () => {\n      for (const plugin of this._resizePlugins) {\n        var _plugin$resize;\n        (_plugin$resize = plugin.resize) === null || _plugin$resize === void 0 || _plugin$resize.call(plugin);\n      }\n    };\n    this._getPluginParticleColors = particle => {\n      let fColor, sColor;\n      for (const plugin of this._colorPlugins) {\n        if (!fColor && plugin.particleFillColor) {\n          fColor = rangeColorToHsl(this._engine, plugin.particleFillColor(particle));\n        }\n        if (!sColor && plugin.particleStrokeColor) {\n          sColor = rangeColorToHsl(this._engine, plugin.particleStrokeColor(particle));\n        }\n        if (fColor && sColor) {\n          break;\n        }\n      }\n      return [fColor, sColor];\n    };\n    this._initCover = async () => {\n      const options = this.container.actualOptions,\n        cover = options.backgroundMask.cover,\n        color = cover.color;\n      if (color) {\n        const coverRgb = rangeColorToRgb(this._engine, color);\n        if (coverRgb) {\n          const coverColor = _objectSpread(_objectSpread({}, coverRgb), {}, {\n            a: cover.opacity\n          });\n          this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n        }\n      } else {\n        await new Promise((resolve, reject) => {\n          if (!cover.image) {\n            return;\n          }\n          const img = document.createElement(\"img\");\n          img.addEventListener(\"load\", () => {\n            this._coverImage = {\n              image: img,\n              opacity: cover.opacity\n            };\n            resolve();\n          });\n          img.addEventListener(\"error\", evt => {\n            reject(evt.error);\n          });\n          img.src = cover.image;\n        });\n      }\n    };\n    this._initStyle = () => {\n      const element = this.element,\n        options = this.container.actualOptions;\n      if (!element) {\n        return;\n      }\n      if (this._fullScreen) {\n        this._setFullScreenStyle();\n      } else {\n        this._resetOriginalStyle();\n      }\n      for (const key in options.style) {\n        if (!key || !options.style || !Object.prototype.hasOwnProperty.call(options.style, key)) {\n          continue;\n        }\n        const value = options.style[key];\n        if (!value) {\n          continue;\n        }\n        element.style.setProperty(key, value, \"important\");\n      }\n    };\n    this._initTrail = async () => {\n      const options = this.container.actualOptions,\n        trail = options.particles.move.trail,\n        trailFill = trail.fill;\n      if (!trail.enable) {\n        return;\n      }\n      const opacity = inverseFactorNumerator / trail.length;\n      if (trailFill.color) {\n        const fillColor = rangeColorToRgb(this._engine, trailFill.color);\n        if (!fillColor) {\n          return;\n        }\n        this._trailFill = {\n          color: _objectSpread({}, fillColor),\n          opacity\n        };\n      } else {\n        await new Promise((resolve, reject) => {\n          if (!trailFill.image) {\n            return;\n          }\n          const img = document.createElement(\"img\");\n          img.addEventListener(\"load\", () => {\n            this._trailFill = {\n              image: img,\n              opacity\n            };\n            resolve();\n          });\n          img.addEventListener(\"error\", evt => {\n            reject(evt.error);\n          });\n          img.src = trailFill.image;\n        });\n      }\n    };\n    this._paintBase = baseColor => {\n      this.draw(ctx => paintBase(ctx, this.size, baseColor));\n    };\n    this._paintImage = (image, opacity) => {\n      this.draw(ctx => paintImage(ctx, this.size, image, opacity));\n    };\n    this._repairStyle = () => {\n      const element = this.element;\n      if (!element) {\n        return;\n      }\n      this._safeMutationObserver(observer => observer.disconnect());\n      this._initStyle();\n      this.initBackground();\n      this._safeMutationObserver(observer => {\n        if (!element || !(element instanceof Node)) {\n          return;\n        }\n        observer.observe(element, {\n          attributes: true\n        });\n      });\n    };\n    this._resetOriginalStyle = () => {\n      const element = this.element,\n        originalStyle = this._originalStyle;\n      if (!element || !originalStyle) {\n        return;\n      }\n      setStyle(element, originalStyle, true);\n    };\n    this._safeMutationObserver = callback => {\n      if (!this._mutationObserver) {\n        return;\n      }\n      callback(this._mutationObserver);\n    };\n    this._setFullScreenStyle = () => {\n      const element = this.element;\n      if (!element) {\n        return;\n      }\n      setStyle(element, getFullScreenStyle(this.container.actualOptions.fullScreen.zIndex), true);\n    };\n    this._engine = engine;\n    this._standardSize = {\n      height: 0,\n      width: 0\n    };\n    const pxRatio = container.retina.pixelRatio,\n      stdSize = this._standardSize;\n    this.size = {\n      height: stdSize.height * pxRatio,\n      width: stdSize.width * pxRatio\n    };\n    this._context = null;\n    this._generated = false;\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  get _fullScreen() {\n    return this.container.actualOptions.fullScreen.enable;\n  }\n  clear() {\n    const options = this.container.actualOptions,\n      trail = options.particles.move.trail,\n      trailFill = this._trailFill;\n    if (options.backgroundMask.enable) {\n      this.paint();\n    } else if (trail.enable && trail.length > minimumLength && trailFill) {\n      if (trailFill.color) {\n        this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n      } else if (trailFill.image) {\n        this._paintImage(trailFill.image, trailFill.opacity);\n      }\n    } else if (options.clear) {\n      this.draw(ctx => {\n        clear(ctx, this.size);\n      });\n    }\n  }\n  destroy() {\n    this.stop();\n    if (this._generated) {\n      const element = this.element;\n      element === null || element === void 0 || element.remove();\n      this.element = undefined;\n    } else {\n      this._resetOriginalStyle();\n    }\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    this._resizePlugins = [];\n    this._colorPlugins = [];\n  }\n  draw(cb) {\n    const ctx = this._context;\n    if (!ctx) {\n      return;\n    }\n    return cb(ctx);\n  }\n  drawAsync(cb) {\n    const ctx = this._context;\n    if (!ctx) {\n      return undefined;\n    }\n    return cb(ctx);\n  }\n  drawParticle(particle, delta) {\n    var _particle$getStrokeCo;\n    if (particle.spawning || particle.destroyed) {\n      return;\n    }\n    const radius = particle.getRadius();\n    if (radius <= minimumSize) {\n      return;\n    }\n    const pfColor = particle.getFillColor(),\n      psColor = (_particle$getStrokeCo = particle.getStrokeColor()) !== null && _particle$getStrokeCo !== void 0 ? _particle$getStrokeCo : pfColor;\n    let [fColor, sColor] = this._getPluginParticleColors(particle);\n    if (!fColor) {\n      fColor = pfColor;\n    }\n    if (!sColor) {\n      sColor = psColor;\n    }\n    if (!fColor && !sColor) {\n      return;\n    }\n    this.draw(ctx => {\n      var _ref, _particle$bubble$opac, _particle$opacity, _particle$strokeOpaci;\n      const container = this.container,\n        options = container.actualOptions,\n        zIndexOptions = particle.options.zIndex,\n        zIndexFactor = zIndexFactorOffset - particle.zIndexFactor,\n        zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate,\n        opacity = (_ref = (_particle$bubble$opac = particle.bubble.opacity) !== null && _particle$bubble$opac !== void 0 ? _particle$bubble$opac : (_particle$opacity = particle.opacity) === null || _particle$opacity === void 0 ? void 0 : _particle$opacity.value) !== null && _ref !== void 0 ? _ref : defaultOpacity,\n        strokeOpacity = (_particle$strokeOpaci = particle.strokeOpacity) !== null && _particle$strokeOpaci !== void 0 ? _particle$strokeOpaci : opacity,\n        zOpacity = opacity * zOpacityFactor,\n        zStrokeOpacity = strokeOpacity * zOpacityFactor,\n        transform = {},\n        colorStyles = {\n          fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined\n        };\n      colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n      this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n      drawParticle({\n        container,\n        context: ctx,\n        particle,\n        delta,\n        colorStyles,\n        backgroundMask: options.backgroundMask.enable,\n        composite: options.backgroundMask.composite,\n        radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n        opacity: zOpacity,\n        shadow: particle.options.shadow,\n        transform\n      });\n      this._applyPostDrawUpdaters(particle);\n    });\n  }\n  drawParticlePlugin(plugin, particle, delta) {\n    this.draw(ctx => drawParticlePlugin(ctx, plugin, particle, delta));\n  }\n  drawPlugin(plugin, delta) {\n    this.draw(ctx => drawPlugin(ctx, plugin, delta));\n  }\n  async init() {\n    this._safeMutationObserver(obs => obs.disconnect());\n    this._mutationObserver = safeMutationObserver(records => {\n      for (const record of records) {\n        if (record.type === \"attributes\" && record.attributeName === \"style\") {\n          this._repairStyle();\n        }\n      }\n    });\n    this.resize();\n    this._initStyle();\n    await this._initCover();\n    try {\n      await this._initTrail();\n    } catch (e) {\n      getLogger().error(e);\n    }\n    this.initBackground();\n    this._safeMutationObserver(obs => {\n      if (!this.element || !(this.element instanceof Node)) {\n        return;\n      }\n      obs.observe(this.element, {\n        attributes: true\n      });\n    });\n    this.initUpdaters();\n    this.initPlugins();\n    this.paint();\n  }\n  initBackground() {\n    const options = this.container.actualOptions,\n      background = options.background,\n      element = this.element;\n    if (!element) {\n      return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n      return;\n    }\n    if (background.color) {\n      const color = rangeColorToRgb(this._engine, background.color);\n      elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n    } else {\n      elementStyle.backgroundColor = \"\";\n    }\n    elementStyle.backgroundImage = background.image || \"\";\n    elementStyle.backgroundPosition = background.position || \"\";\n    elementStyle.backgroundRepeat = background.repeat || \"\";\n    elementStyle.backgroundSize = background.size || \"\";\n  }\n  initPlugins() {\n    this._resizePlugins = [];\n    for (const plugin of this.container.plugins.values()) {\n      var _plugin$particleFillC;\n      if (plugin.resize) {\n        this._resizePlugins.push(plugin);\n      }\n      if ((_plugin$particleFillC = plugin.particleFillColor) !== null && _plugin$particleFillC !== void 0 ? _plugin$particleFillC : plugin.particleStrokeColor) {\n        this._colorPlugins.push(plugin);\n      }\n    }\n  }\n  initUpdaters() {\n    this._preDrawUpdaters = [];\n    this._postDrawUpdaters = [];\n    for (const updater of this.container.particles.updaters) {\n      var _ref2, _updater$getColorStyl;\n      if (updater.afterDraw) {\n        this._postDrawUpdaters.push(updater);\n      }\n      if ((_ref2 = (_updater$getColorStyl = updater.getColorStyles) !== null && _updater$getColorStyl !== void 0 ? _updater$getColorStyl : updater.getTransformValues) !== null && _ref2 !== void 0 ? _ref2 : updater.beforeDraw) {\n        this._preDrawUpdaters.push(updater);\n      }\n    }\n  }\n  loadCanvas(canvas) {\n    if (this._generated && this.element) {\n      this.element.remove();\n    }\n    this._generated = canvas.dataset && generatedAttribute in canvas.dataset ? canvas.dataset[generatedAttribute] === \"true\" : this._generated;\n    this.element = canvas;\n    this.element.ariaHidden = \"true\";\n    this._originalStyle = cloneStyle(this.element.style);\n    const standardSize = this._standardSize;\n    standardSize.height = canvas.offsetHeight;\n    standardSize.width = canvas.offsetWidth;\n    const pxRatio = this.container.retina.pixelRatio,\n      retinaSize = this.size;\n    canvas.height = retinaSize.height = standardSize.height * pxRatio;\n    canvas.width = retinaSize.width = standardSize.width * pxRatio;\n    this._context = this.element.getContext(\"2d\");\n    this._safeMutationObserver(obs => obs.disconnect());\n    this.container.retina.init();\n    this.initBackground();\n    this._safeMutationObserver(obs => {\n      if (!this.element || !(this.element instanceof Node)) {\n        return;\n      }\n      obs.observe(this.element, {\n        attributes: true\n      });\n    });\n  }\n  paint() {\n    const options = this.container.actualOptions;\n    this.draw(ctx => {\n      if (options.backgroundMask.enable && options.backgroundMask.cover) {\n        clear(ctx, this.size);\n        if (this._coverImage) {\n          this._paintImage(this._coverImage.image, this._coverImage.opacity);\n        } else if (this._coverColorStyle) {\n          this._paintBase(this._coverColorStyle);\n        } else {\n          this._paintBase();\n        }\n      } else {\n        this._paintBase();\n      }\n    });\n  }\n  resize() {\n    if (!this.element) {\n      return false;\n    }\n    const container = this.container,\n      currentSize = container.canvas._standardSize,\n      newSize = {\n        width: this.element.offsetWidth,\n        height: this.element.offsetHeight\n      },\n      pxRatio = container.retina.pixelRatio,\n      retinaSize = {\n        width: newSize.width * pxRatio,\n        height: newSize.height * pxRatio\n      };\n    if (newSize.height === currentSize.height && newSize.width === currentSize.width && retinaSize.height === this.element.height && retinaSize.width === this.element.width) {\n      return false;\n    }\n    const oldSize = _objectSpread({}, currentSize);\n    currentSize.height = newSize.height;\n    currentSize.width = newSize.width;\n    const canvasSize = this.size;\n    this.element.width = canvasSize.width = retinaSize.width;\n    this.element.height = canvasSize.height = retinaSize.height;\n    if (this.container.started) {\n      container.particles.setResizeFactor({\n        width: currentSize.width / oldSize.width,\n        height: currentSize.height / oldSize.height\n      });\n    }\n    return true;\n  }\n  stop() {\n    this._safeMutationObserver(obs => obs.disconnect());\n    this._mutationObserver = undefined;\n    this.draw(ctx => clear(ctx, this.size));\n  }\n  async windowResize() {\n    if (!this.element || !this.resize()) {\n      return;\n    }\n    const container = this.container,\n      needsRefresh = container.updateActualOptions();\n    container.particles.setDensity();\n    this._applyResizePlugins();\n    if (needsRefresh) {\n      await container.refresh();\n    }\n  }\n}","map":{"version":3,"names":["clear","drawParticle","drawParticlePlugin","drawPlugin","paintBase","paintImage","cloneStyle","getFullScreenStyle","getLogger","safeMutationObserver","defaultOpacity","defaultTransformValue","generatedAttribute","inverseFactorNumerator","minimumLength","minimumSize","zIndexFactorOffset","getStyleFromHsl","getStyleFromRgb","rangeColorToHsl","rangeColorToRgb","setTransformValue","factor","newFactor","key","newValue","undefined","_factor$key","setStyle","canvas","style","important","arguments","length","element","elementStyle","keys","Set","Object","prototype","hasOwnProperty","call","add","value","getPropertyValue","removeProperty","setProperty","Canvas","constructor","container","engine","_applyPostDrawUpdaters","particle","updater","_postDrawUpdaters","_updater$afterDraw","afterDraw","_applyPreDrawUpdaters","ctx","radius","zOpacity","colorStyles","transform","_preDrawUpdaters","_updater$beforeDraw","getColorStyles","fill","stroke","getTransformValues","updaterTransform","beforeDraw","_applyResizePlugins","plugin","_resizePlugins","_plugin$resize","resize","_getPluginParticleColors","fColor","sColor","_colorPlugins","particleFillColor","_engine","particleStrokeColor","_initCover","options","actualOptions","cover","backgroundMask","color","coverRgb","coverColor","_objectSpread","a","opacity","_coverColorStyle","Promise","resolve","reject","image","img","document","createElement","addEventListener","_coverImage","evt","error","src","_initStyle","_fullScreen","_setFullScreenStyle","_resetOriginalStyle","_initTrail","trail","particles","move","trailFill","enable","fillColor","_trailFill","_paintBase","baseColor","draw","size","_paintImage","_repairStyle","_safeMutationObserver","observer","disconnect","initBackground","Node","observe","attributes","originalStyle","_originalStyle","callback","_mutationObserver","fullScreen","zIndex","_standardSize","height","width","pxRatio","retina","pixelRatio","stdSize","_context","_generated","paint","destroy","stop","remove","cb","drawAsync","delta","_particle$getStrokeCo","spawning","destroyed","getRadius","pfColor","getFillColor","psColor","getStrokeColor","_ref","_particle$bubble$opac","_particle$opacity","_particle$strokeOpaci","zIndexOptions","zIndexFactor","zOpacityFactor","opacityRate","bubble","strokeOpacity","zStrokeOpacity","context","composite","sizeRate","shadow","init","obs","records","record","type","attributeName","e","initUpdaters","initPlugins","background","backgroundColor","backgroundImage","backgroundPosition","position","backgroundRepeat","repeat","backgroundSize","plugins","values","_plugin$particleFillC","push","updaters","_ref2","_updater$getColorStyl","loadCanvas","dataset","ariaHidden","standardSize","offsetHeight","offsetWidth","retinaSize","getContext","currentSize","newSize","oldSize","canvasSize","started","setResizeFactor","windowResize","needsRefresh","updateActualOptions","setDensity","refresh"],"sources":["C:/Users/KIIT/portfolio/node_modules/@tsparticles/engine/browser/Core/Canvas.js"],"sourcesContent":["import { clear, drawParticle, drawParticlePlugin, drawPlugin, paintBase, paintImage } from \"../Utils/CanvasUtils.js\";\nimport { cloneStyle, getFullScreenStyle, getLogger, safeMutationObserver } from \"../Utils/Utils.js\";\nimport { defaultOpacity, defaultTransformValue, generatedAttribute, inverseFactorNumerator, minimumLength, minimumSize, zIndexFactorOffset, } from \"./Utils/Constants.js\";\nimport { getStyleFromHsl, getStyleFromRgb, rangeColorToHsl, rangeColorToRgb } from \"../Utils/ColorUtils.js\";\nfunction setTransformValue(factor, newFactor, key) {\n    const newValue = newFactor[key];\n    if (newValue !== undefined) {\n        factor[key] = (factor[key] ?? defaultTransformValue) * newValue;\n    }\n}\nfunction setStyle(canvas, style, important = false) {\n    if (!style) {\n        return;\n    }\n    const element = canvas;\n    if (!element) {\n        return;\n    }\n    const elementStyle = element.style;\n    if (!elementStyle) {\n        return;\n    }\n    const keys = new Set();\n    for (const key in elementStyle) {\n        if (!Object.prototype.hasOwnProperty.call(elementStyle, key)) {\n            continue;\n        }\n        keys.add(elementStyle[key]);\n    }\n    for (const key in style) {\n        if (!Object.prototype.hasOwnProperty.call(style, key)) {\n            continue;\n        }\n        keys.add(style[key]);\n    }\n    for (const key of keys) {\n        const value = style.getPropertyValue(key);\n        if (!value) {\n            elementStyle.removeProperty(key);\n        }\n        else {\n            elementStyle.setProperty(key, value, important ? \"important\" : \"\");\n        }\n    }\n}\nexport class Canvas {\n    constructor(container, engine) {\n        this.container = container;\n        this._applyPostDrawUpdaters = particle => {\n            for (const updater of this._postDrawUpdaters) {\n                updater.afterDraw?.(particle);\n            }\n        };\n        this._applyPreDrawUpdaters = (ctx, particle, radius, zOpacity, colorStyles, transform) => {\n            for (const updater of this._preDrawUpdaters) {\n                if (updater.getColorStyles) {\n                    const { fill, stroke } = updater.getColorStyles(particle, ctx, radius, zOpacity);\n                    if (fill) {\n                        colorStyles.fill = fill;\n                    }\n                    if (stroke) {\n                        colorStyles.stroke = stroke;\n                    }\n                }\n                if (updater.getTransformValues) {\n                    const updaterTransform = updater.getTransformValues(particle);\n                    for (const key in updaterTransform) {\n                        setTransformValue(transform, updaterTransform, key);\n                    }\n                }\n                updater.beforeDraw?.(particle);\n            }\n        };\n        this._applyResizePlugins = () => {\n            for (const plugin of this._resizePlugins) {\n                plugin.resize?.();\n            }\n        };\n        this._getPluginParticleColors = particle => {\n            let fColor, sColor;\n            for (const plugin of this._colorPlugins) {\n                if (!fColor && plugin.particleFillColor) {\n                    fColor = rangeColorToHsl(this._engine, plugin.particleFillColor(particle));\n                }\n                if (!sColor && plugin.particleStrokeColor) {\n                    sColor = rangeColorToHsl(this._engine, plugin.particleStrokeColor(particle));\n                }\n                if (fColor && sColor) {\n                    break;\n                }\n            }\n            return [fColor, sColor];\n        };\n        this._initCover = async () => {\n            const options = this.container.actualOptions, cover = options.backgroundMask.cover, color = cover.color;\n            if (color) {\n                const coverRgb = rangeColorToRgb(this._engine, color);\n                if (coverRgb) {\n                    const coverColor = {\n                        ...coverRgb,\n                        a: cover.opacity,\n                    };\n                    this._coverColorStyle = getStyleFromRgb(coverColor, coverColor.a);\n                }\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!cover.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._coverImage = {\n                            image: img,\n                            opacity: cover.opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", evt => {\n                        reject(evt.error);\n                    });\n                    img.src = cover.image;\n                });\n            }\n        };\n        this._initStyle = () => {\n            const element = this.element, options = this.container.actualOptions;\n            if (!element) {\n                return;\n            }\n            if (this._fullScreen) {\n                this._setFullScreenStyle();\n            }\n            else {\n                this._resetOriginalStyle();\n            }\n            for (const key in options.style) {\n                if (!key || !options.style || !Object.prototype.hasOwnProperty.call(options.style, key)) {\n                    continue;\n                }\n                const value = options.style[key];\n                if (!value) {\n                    continue;\n                }\n                element.style.setProperty(key, value, \"important\");\n            }\n        };\n        this._initTrail = async () => {\n            const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = trail.fill;\n            if (!trail.enable) {\n                return;\n            }\n            const opacity = inverseFactorNumerator / trail.length;\n            if (trailFill.color) {\n                const fillColor = rangeColorToRgb(this._engine, trailFill.color);\n                if (!fillColor) {\n                    return;\n                }\n                this._trailFill = {\n                    color: {\n                        ...fillColor,\n                    },\n                    opacity,\n                };\n            }\n            else {\n                await new Promise((resolve, reject) => {\n                    if (!trailFill.image) {\n                        return;\n                    }\n                    const img = document.createElement(\"img\");\n                    img.addEventListener(\"load\", () => {\n                        this._trailFill = {\n                            image: img,\n                            opacity,\n                        };\n                        resolve();\n                    });\n                    img.addEventListener(\"error\", evt => {\n                        reject(evt.error);\n                    });\n                    img.src = trailFill.image;\n                });\n            }\n        };\n        this._paintBase = baseColor => {\n            this.draw(ctx => paintBase(ctx, this.size, baseColor));\n        };\n        this._paintImage = (image, opacity) => {\n            this.draw(ctx => paintImage(ctx, this.size, image, opacity));\n        };\n        this._repairStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            this._safeMutationObserver(observer => observer.disconnect());\n            this._initStyle();\n            this.initBackground();\n            this._safeMutationObserver(observer => {\n                if (!element || !(element instanceof Node)) {\n                    return;\n                }\n                observer.observe(element, { attributes: true });\n            });\n        };\n        this._resetOriginalStyle = () => {\n            const element = this.element, originalStyle = this._originalStyle;\n            if (!element || !originalStyle) {\n                return;\n            }\n            setStyle(element, originalStyle, true);\n        };\n        this._safeMutationObserver = callback => {\n            if (!this._mutationObserver) {\n                return;\n            }\n            callback(this._mutationObserver);\n        };\n        this._setFullScreenStyle = () => {\n            const element = this.element;\n            if (!element) {\n                return;\n            }\n            setStyle(element, getFullScreenStyle(this.container.actualOptions.fullScreen.zIndex), true);\n        };\n        this._engine = engine;\n        this._standardSize = {\n            height: 0,\n            width: 0,\n        };\n        const pxRatio = container.retina.pixelRatio, stdSize = this._standardSize;\n        this.size = {\n            height: stdSize.height * pxRatio,\n            width: stdSize.width * pxRatio,\n        };\n        this._context = null;\n        this._generated = false;\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    get _fullScreen() {\n        return this.container.actualOptions.fullScreen.enable;\n    }\n    clear() {\n        const options = this.container.actualOptions, trail = options.particles.move.trail, trailFill = this._trailFill;\n        if (options.backgroundMask.enable) {\n            this.paint();\n        }\n        else if (trail.enable && trail.length > minimumLength && trailFill) {\n            if (trailFill.color) {\n                this._paintBase(getStyleFromRgb(trailFill.color, trailFill.opacity));\n            }\n            else if (trailFill.image) {\n                this._paintImage(trailFill.image, trailFill.opacity);\n            }\n        }\n        else if (options.clear) {\n            this.draw(ctx => {\n                clear(ctx, this.size);\n            });\n        }\n    }\n    destroy() {\n        this.stop();\n        if (this._generated) {\n            const element = this.element;\n            element?.remove();\n            this.element = undefined;\n        }\n        else {\n            this._resetOriginalStyle();\n        }\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        this._resizePlugins = [];\n        this._colorPlugins = [];\n    }\n    draw(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return;\n        }\n        return cb(ctx);\n    }\n    drawAsync(cb) {\n        const ctx = this._context;\n        if (!ctx) {\n            return undefined;\n        }\n        return cb(ctx);\n    }\n    drawParticle(particle, delta) {\n        if (particle.spawning || particle.destroyed) {\n            return;\n        }\n        const radius = particle.getRadius();\n        if (radius <= minimumSize) {\n            return;\n        }\n        const pfColor = particle.getFillColor(), psColor = particle.getStrokeColor() ?? pfColor;\n        let [fColor, sColor] = this._getPluginParticleColors(particle);\n        if (!fColor) {\n            fColor = pfColor;\n        }\n        if (!sColor) {\n            sColor = psColor;\n        }\n        if (!fColor && !sColor) {\n            return;\n        }\n        this.draw((ctx) => {\n            const container = this.container, options = container.actualOptions, zIndexOptions = particle.options.zIndex, zIndexFactor = zIndexFactorOffset - particle.zIndexFactor, zOpacityFactor = zIndexFactor ** zIndexOptions.opacityRate, opacity = particle.bubble.opacity ?? particle.opacity?.value ?? defaultOpacity, strokeOpacity = particle.strokeOpacity ?? opacity, zOpacity = opacity * zOpacityFactor, zStrokeOpacity = strokeOpacity * zOpacityFactor, transform = {}, colorStyles = {\n                fill: fColor ? getStyleFromHsl(fColor, zOpacity) : undefined,\n            };\n            colorStyles.stroke = sColor ? getStyleFromHsl(sColor, zStrokeOpacity) : colorStyles.fill;\n            this._applyPreDrawUpdaters(ctx, particle, radius, zOpacity, colorStyles, transform);\n            drawParticle({\n                container,\n                context: ctx,\n                particle,\n                delta,\n                colorStyles,\n                backgroundMask: options.backgroundMask.enable,\n                composite: options.backgroundMask.composite,\n                radius: radius * zIndexFactor ** zIndexOptions.sizeRate,\n                opacity: zOpacity,\n                shadow: particle.options.shadow,\n                transform,\n            });\n            this._applyPostDrawUpdaters(particle);\n        });\n    }\n    drawParticlePlugin(plugin, particle, delta) {\n        this.draw(ctx => drawParticlePlugin(ctx, plugin, particle, delta));\n    }\n    drawPlugin(plugin, delta) {\n        this.draw(ctx => drawPlugin(ctx, plugin, delta));\n    }\n    async init() {\n        this._safeMutationObserver(obs => obs.disconnect());\n        this._mutationObserver = safeMutationObserver(records => {\n            for (const record of records) {\n                if (record.type === \"attributes\" && record.attributeName === \"style\") {\n                    this._repairStyle();\n                }\n            }\n        });\n        this.resize();\n        this._initStyle();\n        await this._initCover();\n        try {\n            await this._initTrail();\n        }\n        catch (e) {\n            getLogger().error(e);\n        }\n        this.initBackground();\n        this._safeMutationObserver(obs => {\n            if (!this.element || !(this.element instanceof Node)) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n        this.initUpdaters();\n        this.initPlugins();\n        this.paint();\n    }\n    initBackground() {\n        const options = this.container.actualOptions, background = options.background, element = this.element;\n        if (!element) {\n            return;\n        }\n        const elementStyle = element.style;\n        if (!elementStyle) {\n            return;\n        }\n        if (background.color) {\n            const color = rangeColorToRgb(this._engine, background.color);\n            elementStyle.backgroundColor = color ? getStyleFromRgb(color, background.opacity) : \"\";\n        }\n        else {\n            elementStyle.backgroundColor = \"\";\n        }\n        elementStyle.backgroundImage = background.image || \"\";\n        elementStyle.backgroundPosition = background.position || \"\";\n        elementStyle.backgroundRepeat = background.repeat || \"\";\n        elementStyle.backgroundSize = background.size || \"\";\n    }\n    initPlugins() {\n        this._resizePlugins = [];\n        for (const plugin of this.container.plugins.values()) {\n            if (plugin.resize) {\n                this._resizePlugins.push(plugin);\n            }\n            if (plugin.particleFillColor ?? plugin.particleStrokeColor) {\n                this._colorPlugins.push(plugin);\n            }\n        }\n    }\n    initUpdaters() {\n        this._preDrawUpdaters = [];\n        this._postDrawUpdaters = [];\n        for (const updater of this.container.particles.updaters) {\n            if (updater.afterDraw) {\n                this._postDrawUpdaters.push(updater);\n            }\n            if (updater.getColorStyles ?? updater.getTransformValues ?? updater.beforeDraw) {\n                this._preDrawUpdaters.push(updater);\n            }\n        }\n    }\n    loadCanvas(canvas) {\n        if (this._generated && this.element) {\n            this.element.remove();\n        }\n        this._generated =\n            canvas.dataset && generatedAttribute in canvas.dataset\n                ? canvas.dataset[generatedAttribute] === \"true\"\n                : this._generated;\n        this.element = canvas;\n        this.element.ariaHidden = \"true\";\n        this._originalStyle = cloneStyle(this.element.style);\n        const standardSize = this._standardSize;\n        standardSize.height = canvas.offsetHeight;\n        standardSize.width = canvas.offsetWidth;\n        const pxRatio = this.container.retina.pixelRatio, retinaSize = this.size;\n        canvas.height = retinaSize.height = standardSize.height * pxRatio;\n        canvas.width = retinaSize.width = standardSize.width * pxRatio;\n        this._context = this.element.getContext(\"2d\");\n        this._safeMutationObserver(obs => obs.disconnect());\n        this.container.retina.init();\n        this.initBackground();\n        this._safeMutationObserver(obs => {\n            if (!this.element || !(this.element instanceof Node)) {\n                return;\n            }\n            obs.observe(this.element, { attributes: true });\n        });\n    }\n    paint() {\n        const options = this.container.actualOptions;\n        this.draw(ctx => {\n            if (options.backgroundMask.enable && options.backgroundMask.cover) {\n                clear(ctx, this.size);\n                if (this._coverImage) {\n                    this._paintImage(this._coverImage.image, this._coverImage.opacity);\n                }\n                else if (this._coverColorStyle) {\n                    this._paintBase(this._coverColorStyle);\n                }\n                else {\n                    this._paintBase();\n                }\n            }\n            else {\n                this._paintBase();\n            }\n        });\n    }\n    resize() {\n        if (!this.element) {\n            return false;\n        }\n        const container = this.container, currentSize = container.canvas._standardSize, newSize = {\n            width: this.element.offsetWidth,\n            height: this.element.offsetHeight,\n        }, pxRatio = container.retina.pixelRatio, retinaSize = {\n            width: newSize.width * pxRatio,\n            height: newSize.height * pxRatio,\n        };\n        if (newSize.height === currentSize.height &&\n            newSize.width === currentSize.width &&\n            retinaSize.height === this.element.height &&\n            retinaSize.width === this.element.width) {\n            return false;\n        }\n        const oldSize = { ...currentSize };\n        currentSize.height = newSize.height;\n        currentSize.width = newSize.width;\n        const canvasSize = this.size;\n        this.element.width = canvasSize.width = retinaSize.width;\n        this.element.height = canvasSize.height = retinaSize.height;\n        if (this.container.started) {\n            container.particles.setResizeFactor({\n                width: currentSize.width / oldSize.width,\n                height: currentSize.height / oldSize.height,\n            });\n        }\n        return true;\n    }\n    stop() {\n        this._safeMutationObserver(obs => obs.disconnect());\n        this._mutationObserver = undefined;\n        this.draw(ctx => clear(ctx, this.size));\n    }\n    async windowResize() {\n        if (!this.element || !this.resize()) {\n            return;\n        }\n        const container = this.container, needsRefresh = container.updateActualOptions();\n        container.particles.setDensity();\n        this._applyResizePlugins();\n        if (needsRefresh) {\n            await container.refresh();\n        }\n    }\n}\n"],"mappings":";AAAA,SAASA,KAAK,EAAEC,YAAY,EAAEC,kBAAkB,EAAEC,UAAU,EAAEC,SAAS,EAAEC,UAAU,QAAQ,yBAAyB;AACpH,SAASC,UAAU,EAAEC,kBAAkB,EAAEC,SAAS,EAAEC,oBAAoB,QAAQ,mBAAmB;AACnG,SAASC,cAAc,EAAEC,qBAAqB,EAAEC,kBAAkB,EAAEC,sBAAsB,EAAEC,aAAa,EAAEC,WAAW,EAAEC,kBAAkB,QAAS,sBAAsB;AACzK,SAASC,eAAe,EAAEC,eAAe,EAAEC,eAAe,EAAEC,eAAe,QAAQ,wBAAwB;AAC3G,SAASC,iBAAiBA,CAACC,MAAM,EAAEC,SAAS,EAAEC,GAAG,EAAE;EAC/C,MAAMC,QAAQ,GAAGF,SAAS,CAACC,GAAG,CAAC;EAC/B,IAAIC,QAAQ,KAAKC,SAAS,EAAE;IAAA,IAAAC,WAAA;IACxBL,MAAM,CAACE,GAAG,CAAC,GAAG,EAAAG,WAAA,GAACL,MAAM,CAACE,GAAG,CAAC,cAAAG,WAAA,cAAAA,WAAA,GAAIhB,qBAAqB,IAAIc,QAAQ;EACnE;AACJ;AACA,SAASG,QAAQA,CAACC,MAAM,EAAEC,KAAK,EAAqB;EAAA,IAAnBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAN,SAAA,GAAAM,SAAA,MAAG,KAAK;EAC9C,IAAI,CAACF,KAAK,EAAE;IACR;EACJ;EACA,MAAMI,OAAO,GAAGL,MAAM;EACtB,IAAI,CAACK,OAAO,EAAE;IACV;EACJ;EACA,MAAMC,YAAY,GAAGD,OAAO,CAACJ,KAAK;EAClC,IAAI,CAACK,YAAY,EAAE;IACf;EACJ;EACA,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAC,CAAC;EACtB,KAAK,MAAMb,GAAG,IAAIW,YAAY,EAAE;IAC5B,IAAI,CAACG,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACN,YAAY,EAAEX,GAAG,CAAC,EAAE;MAC1D;IACJ;IACAY,IAAI,CAACM,GAAG,CAACP,YAAY,CAACX,GAAG,CAAC,CAAC;EAC/B;EACA,KAAK,MAAMA,GAAG,IAAIM,KAAK,EAAE;IACrB,IAAI,CAACQ,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAACX,KAAK,EAAEN,GAAG,CAAC,EAAE;MACnD;IACJ;IACAY,IAAI,CAACM,GAAG,CAACZ,KAAK,CAACN,GAAG,CAAC,CAAC;EACxB;EACA,KAAK,MAAMA,GAAG,IAAIY,IAAI,EAAE;IACpB,MAAMO,KAAK,GAAGb,KAAK,CAACc,gBAAgB,CAACpB,GAAG,CAAC;IACzC,IAAI,CAACmB,KAAK,EAAE;MACRR,YAAY,CAACU,cAAc,CAACrB,GAAG,CAAC;IACpC,CAAC,MACI;MACDW,YAAY,CAACW,WAAW,CAACtB,GAAG,EAAEmB,KAAK,EAAEZ,SAAS,GAAG,WAAW,GAAG,EAAE,CAAC;IACtE;EACJ;AACJ;AACA,OAAO,MAAMgB,MAAM,CAAC;EAChBC,WAAWA,CAACC,SAAS,EAAEC,MAAM,EAAE;IAC3B,IAAI,CAACD,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACE,sBAAsB,GAAGC,QAAQ,IAAI;MACtC,KAAK,MAAMC,OAAO,IAAI,IAAI,CAACC,iBAAiB,EAAE;QAAA,IAAAC,kBAAA;QAC1C,CAAAA,kBAAA,GAAAF,OAAO,CAACG,SAAS,cAAAD,kBAAA,eAAjBA,kBAAA,CAAAd,IAAA,CAAAY,OAAO,EAAaD,QAAQ,CAAC;MACjC;IACJ,CAAC;IACD,IAAI,CAACK,qBAAqB,GAAG,CAACC,GAAG,EAAEN,QAAQ,EAAEO,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,KAAK;MACtF,KAAK,MAAMT,OAAO,IAAI,IAAI,CAACU,gBAAgB,EAAE;QAAA,IAAAC,mBAAA;QACzC,IAAIX,OAAO,CAACY,cAAc,EAAE;UACxB,MAAM;YAAEC,IAAI;YAAEC;UAAO,CAAC,GAAGd,OAAO,CAACY,cAAc,CAACb,QAAQ,EAAEM,GAAG,EAAEC,MAAM,EAAEC,QAAQ,CAAC;UAChF,IAAIM,IAAI,EAAE;YACNL,WAAW,CAACK,IAAI,GAAGA,IAAI;UAC3B;UACA,IAAIC,MAAM,EAAE;YACRN,WAAW,CAACM,MAAM,GAAGA,MAAM;UAC/B;QACJ;QACA,IAAId,OAAO,CAACe,kBAAkB,EAAE;UAC5B,MAAMC,gBAAgB,GAAGhB,OAAO,CAACe,kBAAkB,CAAChB,QAAQ,CAAC;UAC7D,KAAK,MAAM5B,GAAG,IAAI6C,gBAAgB,EAAE;YAChChD,iBAAiB,CAACyC,SAAS,EAAEO,gBAAgB,EAAE7C,GAAG,CAAC;UACvD;QACJ;QACA,CAAAwC,mBAAA,GAAAX,OAAO,CAACiB,UAAU,cAAAN,mBAAA,eAAlBA,mBAAA,CAAAvB,IAAA,CAAAY,OAAO,EAAcD,QAAQ,CAAC;MAClC;IACJ,CAAC;IACD,IAAI,CAACmB,mBAAmB,GAAG,MAAM;MAC7B,KAAK,MAAMC,MAAM,IAAI,IAAI,CAACC,cAAc,EAAE;QAAA,IAAAC,cAAA;QACtC,CAAAA,cAAA,GAAAF,MAAM,CAACG,MAAM,cAAAD,cAAA,eAAbA,cAAA,CAAAjC,IAAA,CAAA+B,MAAgB,CAAC;MACrB;IACJ,CAAC;IACD,IAAI,CAACI,wBAAwB,GAAGxB,QAAQ,IAAI;MACxC,IAAIyB,MAAM,EAAEC,MAAM;MAClB,KAAK,MAAMN,MAAM,IAAI,IAAI,CAACO,aAAa,EAAE;QACrC,IAAI,CAACF,MAAM,IAAIL,MAAM,CAACQ,iBAAiB,EAAE;UACrCH,MAAM,GAAG1D,eAAe,CAAC,IAAI,CAAC8D,OAAO,EAAET,MAAM,CAACQ,iBAAiB,CAAC5B,QAAQ,CAAC,CAAC;QAC9E;QACA,IAAI,CAAC0B,MAAM,IAAIN,MAAM,CAACU,mBAAmB,EAAE;UACvCJ,MAAM,GAAG3D,eAAe,CAAC,IAAI,CAAC8D,OAAO,EAAET,MAAM,CAACU,mBAAmB,CAAC9B,QAAQ,CAAC,CAAC;QAChF;QACA,IAAIyB,MAAM,IAAIC,MAAM,EAAE;UAClB;QACJ;MACJ;MACA,OAAO,CAACD,MAAM,EAAEC,MAAM,CAAC;IAC3B,CAAC;IACD,IAAI,CAACK,UAAU,GAAG,YAAY;MAC1B,MAAMC,OAAO,GAAG,IAAI,CAACnC,SAAS,CAACoC,aAAa;QAAEC,KAAK,GAAGF,OAAO,CAACG,cAAc,CAACD,KAAK;QAAEE,KAAK,GAAGF,KAAK,CAACE,KAAK;MACvG,IAAIA,KAAK,EAAE;QACP,MAAMC,QAAQ,GAAGrE,eAAe,CAAC,IAAI,CAAC6D,OAAO,EAAEO,KAAK,CAAC;QACrD,IAAIC,QAAQ,EAAE;UACV,MAAMC,UAAU,GAAAC,aAAA,CAAAA,aAAA,KACTF,QAAQ;YACXG,CAAC,EAAEN,KAAK,CAACO;UAAO,EACnB;UACD,IAAI,CAACC,gBAAgB,GAAG5E,eAAe,CAACwE,UAAU,EAAEA,UAAU,CAACE,CAAC,CAAC;QACrE;MACJ,CAAC,MACI;QACD,MAAM,IAAIG,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACnC,IAAI,CAACX,KAAK,CAACY,KAAK,EAAE;YACd;UACJ;UACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;UACzCF,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAM;YAC/B,IAAI,CAACC,WAAW,GAAG;cACfL,KAAK,EAAEC,GAAG;cACVN,OAAO,EAAEP,KAAK,CAACO;YACnB,CAAC;YACDG,OAAO,CAAC,CAAC;UACb,CAAC,CAAC;UACFG,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAEE,GAAG,IAAI;YACjCP,MAAM,CAACO,GAAG,CAACC,KAAK,CAAC;UACrB,CAAC,CAAC;UACFN,GAAG,CAACO,GAAG,GAAGpB,KAAK,CAACY,KAAK;QACzB,CAAC,CAAC;MACN;IACJ,CAAC;IACD,IAAI,CAACS,UAAU,GAAG,MAAM;MACpB,MAAMzE,OAAO,GAAG,IAAI,CAACA,OAAO;QAAEkD,OAAO,GAAG,IAAI,CAACnC,SAAS,CAACoC,aAAa;MACpE,IAAI,CAACnD,OAAO,EAAE;QACV;MACJ;MACA,IAAI,IAAI,CAAC0E,WAAW,EAAE;QAClB,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC9B,CAAC,MACI;QACD,IAAI,CAACC,mBAAmB,CAAC,CAAC;MAC9B;MACA,KAAK,MAAMtF,GAAG,IAAI4D,OAAO,CAACtD,KAAK,EAAE;QAC7B,IAAI,CAACN,GAAG,IAAI,CAAC4D,OAAO,CAACtD,KAAK,IAAI,CAACQ,MAAM,CAACC,SAAS,CAACC,cAAc,CAACC,IAAI,CAAC2C,OAAO,CAACtD,KAAK,EAAEN,GAAG,CAAC,EAAE;UACrF;QACJ;QACA,MAAMmB,KAAK,GAAGyC,OAAO,CAACtD,KAAK,CAACN,GAAG,CAAC;QAChC,IAAI,CAACmB,KAAK,EAAE;UACR;QACJ;QACAT,OAAO,CAACJ,KAAK,CAACgB,WAAW,CAACtB,GAAG,EAAEmB,KAAK,EAAE,WAAW,CAAC;MACtD;IACJ,CAAC;IACD,IAAI,CAACoE,UAAU,GAAG,YAAY;MAC1B,MAAM3B,OAAO,GAAG,IAAI,CAACnC,SAAS,CAACoC,aAAa;QAAE2B,KAAK,GAAG5B,OAAO,CAAC6B,SAAS,CAACC,IAAI,CAACF,KAAK;QAAEG,SAAS,GAAGH,KAAK,CAAC9C,IAAI;MAC1G,IAAI,CAAC8C,KAAK,CAACI,MAAM,EAAE;QACf;MACJ;MACA,MAAMvB,OAAO,GAAGhF,sBAAsB,GAAGmG,KAAK,CAAC/E,MAAM;MACrD,IAAIkF,SAAS,CAAC3B,KAAK,EAAE;QACjB,MAAM6B,SAAS,GAAGjG,eAAe,CAAC,IAAI,CAAC6D,OAAO,EAAEkC,SAAS,CAAC3B,KAAK,CAAC;QAChE,IAAI,CAAC6B,SAAS,EAAE;UACZ;QACJ;QACA,IAAI,CAACC,UAAU,GAAG;UACd9B,KAAK,EAAAG,aAAA,KACE0B,SAAS,CACf;UACDxB;QACJ,CAAC;MACL,CAAC,MACI;QACD,MAAM,IAAIE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACnC,IAAI,CAACkB,SAAS,CAACjB,KAAK,EAAE;YAClB;UACJ;UACA,MAAMC,GAAG,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;UACzCF,GAAG,CAACG,gBAAgB,CAAC,MAAM,EAAE,MAAM;YAC/B,IAAI,CAACgB,UAAU,GAAG;cACdpB,KAAK,EAAEC,GAAG;cACVN;YACJ,CAAC;YACDG,OAAO,CAAC,CAAC;UACb,CAAC,CAAC;UACFG,GAAG,CAACG,gBAAgB,CAAC,OAAO,EAAEE,GAAG,IAAI;YACjCP,MAAM,CAACO,GAAG,CAACC,KAAK,CAAC;UACrB,CAAC,CAAC;UACFN,GAAG,CAACO,GAAG,GAAGS,SAAS,CAACjB,KAAK;QAC7B,CAAC,CAAC;MACN;IACJ,CAAC;IACD,IAAI,CAACqB,UAAU,GAAGC,SAAS,IAAI;MAC3B,IAAI,CAACC,IAAI,CAAC/D,GAAG,IAAItD,SAAS,CAACsD,GAAG,EAAE,IAAI,CAACgE,IAAI,EAAEF,SAAS,CAAC,CAAC;IAC1D,CAAC;IACD,IAAI,CAACG,WAAW,GAAG,CAACzB,KAAK,EAAEL,OAAO,KAAK;MACnC,IAAI,CAAC4B,IAAI,CAAC/D,GAAG,IAAIrD,UAAU,CAACqD,GAAG,EAAE,IAAI,CAACgE,IAAI,EAAExB,KAAK,EAAEL,OAAO,CAAC,CAAC;IAChE,CAAC;IACD,IAAI,CAAC+B,YAAY,GAAG,MAAM;MACtB,MAAM1F,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5B,IAAI,CAACA,OAAO,EAAE;QACV;MACJ;MACA,IAAI,CAAC2F,qBAAqB,CAACC,QAAQ,IAAIA,QAAQ,CAACC,UAAU,CAAC,CAAC,CAAC;MAC7D,IAAI,CAACpB,UAAU,CAAC,CAAC;MACjB,IAAI,CAACqB,cAAc,CAAC,CAAC;MACrB,IAAI,CAACH,qBAAqB,CAACC,QAAQ,IAAI;QACnC,IAAI,CAAC5F,OAAO,IAAI,EAAEA,OAAO,YAAY+F,IAAI,CAAC,EAAE;UACxC;QACJ;QACAH,QAAQ,CAACI,OAAO,CAAChG,OAAO,EAAE;UAAEiG,UAAU,EAAE;QAAK,CAAC,CAAC;MACnD,CAAC,CAAC;IACN,CAAC;IACD,IAAI,CAACrB,mBAAmB,GAAG,MAAM;MAC7B,MAAM5E,OAAO,GAAG,IAAI,CAACA,OAAO;QAAEkG,aAAa,GAAG,IAAI,CAACC,cAAc;MACjE,IAAI,CAACnG,OAAO,IAAI,CAACkG,aAAa,EAAE;QAC5B;MACJ;MACAxG,QAAQ,CAACM,OAAO,EAAEkG,aAAa,EAAE,IAAI,CAAC;IAC1C,CAAC;IACD,IAAI,CAACP,qBAAqB,GAAGS,QAAQ,IAAI;MACrC,IAAI,CAAC,IAAI,CAACC,iBAAiB,EAAE;QACzB;MACJ;MACAD,QAAQ,CAAC,IAAI,CAACC,iBAAiB,CAAC;IACpC,CAAC;IACD,IAAI,CAAC1B,mBAAmB,GAAG,MAAM;MAC7B,MAAM3E,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5B,IAAI,CAACA,OAAO,EAAE;QACV;MACJ;MACAN,QAAQ,CAACM,OAAO,EAAE3B,kBAAkB,CAAC,IAAI,CAAC0C,SAAS,CAACoC,aAAa,CAACmD,UAAU,CAACC,MAAM,CAAC,EAAE,IAAI,CAAC;IAC/F,CAAC;IACD,IAAI,CAACxD,OAAO,GAAG/B,MAAM;IACrB,IAAI,CAACwF,aAAa,GAAG;MACjBC,MAAM,EAAE,CAAC;MACTC,KAAK,EAAE;IACX,CAAC;IACD,MAAMC,OAAO,GAAG5F,SAAS,CAAC6F,MAAM,CAACC,UAAU;MAAEC,OAAO,GAAG,IAAI,CAACN,aAAa;IACzE,IAAI,CAAChB,IAAI,GAAG;MACRiB,MAAM,EAAEK,OAAO,CAACL,MAAM,GAAGE,OAAO;MAChCD,KAAK,EAAEI,OAAO,CAACJ,KAAK,GAAGC;IAC3B,CAAC;IACD,IAAI,CAACI,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB,IAAI,CAACnF,gBAAgB,GAAG,EAAE;IAC1B,IAAI,CAACT,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACmB,cAAc,GAAG,EAAE;IACxB,IAAI,CAACM,aAAa,GAAG,EAAE;EAC3B;EACA,IAAI6B,WAAWA,CAAA,EAAG;IACd,OAAO,IAAI,CAAC3D,SAAS,CAACoC,aAAa,CAACmD,UAAU,CAACpB,MAAM;EACzD;EACApH,KAAKA,CAAA,EAAG;IACJ,MAAMoF,OAAO,GAAG,IAAI,CAACnC,SAAS,CAACoC,aAAa;MAAE2B,KAAK,GAAG5B,OAAO,CAAC6B,SAAS,CAACC,IAAI,CAACF,KAAK;MAAEG,SAAS,GAAG,IAAI,CAACG,UAAU;IAC/G,IAAIlC,OAAO,CAACG,cAAc,CAAC6B,MAAM,EAAE;MAC/B,IAAI,CAAC+B,KAAK,CAAC,CAAC;IAChB,CAAC,MACI,IAAInC,KAAK,CAACI,MAAM,IAAIJ,KAAK,CAAC/E,MAAM,GAAGnB,aAAa,IAAIqG,SAAS,EAAE;MAChE,IAAIA,SAAS,CAAC3B,KAAK,EAAE;QACjB,IAAI,CAAC+B,UAAU,CAACrG,eAAe,CAACiG,SAAS,CAAC3B,KAAK,EAAE2B,SAAS,CAACtB,OAAO,CAAC,CAAC;MACxE,CAAC,MACI,IAAIsB,SAAS,CAACjB,KAAK,EAAE;QACtB,IAAI,CAACyB,WAAW,CAACR,SAAS,CAACjB,KAAK,EAAEiB,SAAS,CAACtB,OAAO,CAAC;MACxD;IACJ,CAAC,MACI,IAAIT,OAAO,CAACpF,KAAK,EAAE;MACpB,IAAI,CAACyH,IAAI,CAAC/D,GAAG,IAAI;QACb1D,KAAK,CAAC0D,GAAG,EAAE,IAAI,CAACgE,IAAI,CAAC;MACzB,CAAC,CAAC;IACN;EACJ;EACA0B,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,IAAI,CAAC,CAAC;IACX,IAAI,IAAI,CAACH,UAAU,EAAE;MACjB,MAAMhH,OAAO,GAAG,IAAI,CAACA,OAAO;MAC5BA,OAAO,aAAPA,OAAO,eAAPA,OAAO,CAAEoH,MAAM,CAAC,CAAC;MACjB,IAAI,CAACpH,OAAO,GAAGR,SAAS;IAC5B,CAAC,MACI;MACD,IAAI,CAACoF,mBAAmB,CAAC,CAAC;IAC9B;IACA,IAAI,CAAC/C,gBAAgB,GAAG,EAAE;IAC1B,IAAI,CAACT,iBAAiB,GAAG,EAAE;IAC3B,IAAI,CAACmB,cAAc,GAAG,EAAE;IACxB,IAAI,CAACM,aAAa,GAAG,EAAE;EAC3B;EACA0C,IAAIA,CAAC8B,EAAE,EAAE;IACL,MAAM7F,GAAG,GAAG,IAAI,CAACuF,QAAQ;IACzB,IAAI,CAACvF,GAAG,EAAE;MACN;IACJ;IACA,OAAO6F,EAAE,CAAC7F,GAAG,CAAC;EAClB;EACA8F,SAASA,CAACD,EAAE,EAAE;IACV,MAAM7F,GAAG,GAAG,IAAI,CAACuF,QAAQ;IACzB,IAAI,CAACvF,GAAG,EAAE;MACN,OAAOhC,SAAS;IACpB;IACA,OAAO6H,EAAE,CAAC7F,GAAG,CAAC;EAClB;EACAzD,YAAYA,CAACmD,QAAQ,EAAEqG,KAAK,EAAE;IAAA,IAAAC,qBAAA;IAC1B,IAAItG,QAAQ,CAACuG,QAAQ,IAAIvG,QAAQ,CAACwG,SAAS,EAAE;MACzC;IACJ;IACA,MAAMjG,MAAM,GAAGP,QAAQ,CAACyG,SAAS,CAAC,CAAC;IACnC,IAAIlG,MAAM,IAAI5C,WAAW,EAAE;MACvB;IACJ;IACA,MAAM+I,OAAO,GAAG1G,QAAQ,CAAC2G,YAAY,CAAC,CAAC;MAAEC,OAAO,IAAAN,qBAAA,GAAGtG,QAAQ,CAAC6G,cAAc,CAAC,CAAC,cAAAP,qBAAA,cAAAA,qBAAA,GAAII,OAAO;IACvF,IAAI,CAACjF,MAAM,EAAEC,MAAM,CAAC,GAAG,IAAI,CAACF,wBAAwB,CAACxB,QAAQ,CAAC;IAC9D,IAAI,CAACyB,MAAM,EAAE;MACTA,MAAM,GAAGiF,OAAO;IACpB;IACA,IAAI,CAAChF,MAAM,EAAE;MACTA,MAAM,GAAGkF,OAAO;IACpB;IACA,IAAI,CAACnF,MAAM,IAAI,CAACC,MAAM,EAAE;MACpB;IACJ;IACA,IAAI,CAAC2C,IAAI,CAAE/D,GAAG,IAAK;MAAA,IAAAwG,IAAA,EAAAC,qBAAA,EAAAC,iBAAA,EAAAC,qBAAA;MACf,MAAMpH,SAAS,GAAG,IAAI,CAACA,SAAS;QAAEmC,OAAO,GAAGnC,SAAS,CAACoC,aAAa;QAAEiF,aAAa,GAAGlH,QAAQ,CAACgC,OAAO,CAACqD,MAAM;QAAE8B,YAAY,GAAGvJ,kBAAkB,GAAGoC,QAAQ,CAACmH,YAAY;QAAEC,cAAc,GAAGD,YAAY,IAAID,aAAa,CAACG,WAAW;QAAE5E,OAAO,IAAAqE,IAAA,IAAAC,qBAAA,GAAG/G,QAAQ,CAACsH,MAAM,CAAC7E,OAAO,cAAAsE,qBAAA,cAAAA,qBAAA,IAAAC,iBAAA,GAAIhH,QAAQ,CAACyC,OAAO,cAAAuE,iBAAA,uBAAhBA,iBAAA,CAAkBzH,KAAK,cAAAuH,IAAA,cAAAA,IAAA,GAAIxJ,cAAc;QAAEiK,aAAa,IAAAN,qBAAA,GAAGjH,QAAQ,CAACuH,aAAa,cAAAN,qBAAA,cAAAA,qBAAA,GAAIxE,OAAO;QAAEjC,QAAQ,GAAGiC,OAAO,GAAG2E,cAAc;QAAEI,cAAc,GAAGD,aAAa,GAAGH,cAAc;QAAE1G,SAAS,GAAG,CAAC,CAAC;QAAED,WAAW,GAAG;UACxdK,IAAI,EAAEW,MAAM,GAAG5D,eAAe,CAAC4D,MAAM,EAAEjB,QAAQ,CAAC,GAAGlC;QACvD,CAAC;MACDmC,WAAW,CAACM,MAAM,GAAGW,MAAM,GAAG7D,eAAe,CAAC6D,MAAM,EAAE8F,cAAc,CAAC,GAAG/G,WAAW,CAACK,IAAI;MACxF,IAAI,CAACT,qBAAqB,CAACC,GAAG,EAAEN,QAAQ,EAAEO,MAAM,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,CAAC;MACnF7D,YAAY,CAAC;QACTgD,SAAS;QACT4H,OAAO,EAAEnH,GAAG;QACZN,QAAQ;QACRqG,KAAK;QACL5F,WAAW;QACX0B,cAAc,EAAEH,OAAO,CAACG,cAAc,CAAC6B,MAAM;QAC7C0D,SAAS,EAAE1F,OAAO,CAACG,cAAc,CAACuF,SAAS;QAC3CnH,MAAM,EAAEA,MAAM,GAAG4G,YAAY,IAAID,aAAa,CAACS,QAAQ;QACvDlF,OAAO,EAAEjC,QAAQ;QACjBoH,MAAM,EAAE5H,QAAQ,CAACgC,OAAO,CAAC4F,MAAM;QAC/BlH;MACJ,CAAC,CAAC;MACF,IAAI,CAACX,sBAAsB,CAACC,QAAQ,CAAC;IACzC,CAAC,CAAC;EACN;EACAlD,kBAAkBA,CAACsE,MAAM,EAAEpB,QAAQ,EAAEqG,KAAK,EAAE;IACxC,IAAI,CAAChC,IAAI,CAAC/D,GAAG,IAAIxD,kBAAkB,CAACwD,GAAG,EAAEc,MAAM,EAAEpB,QAAQ,EAAEqG,KAAK,CAAC,CAAC;EACtE;EACAtJ,UAAUA,CAACqE,MAAM,EAAEiF,KAAK,EAAE;IACtB,IAAI,CAAChC,IAAI,CAAC/D,GAAG,IAAIvD,UAAU,CAACuD,GAAG,EAAEc,MAAM,EAAEiF,KAAK,CAAC,CAAC;EACpD;EACA,MAAMwB,IAAIA,CAAA,EAAG;IACT,IAAI,CAACpD,qBAAqB,CAACqD,GAAG,IAAIA,GAAG,CAACnD,UAAU,CAAC,CAAC,CAAC;IACnD,IAAI,CAACQ,iBAAiB,GAAG9H,oBAAoB,CAAC0K,OAAO,IAAI;MACrD,KAAK,MAAMC,MAAM,IAAID,OAAO,EAAE;QAC1B,IAAIC,MAAM,CAACC,IAAI,KAAK,YAAY,IAAID,MAAM,CAACE,aAAa,KAAK,OAAO,EAAE;UAClE,IAAI,CAAC1D,YAAY,CAAC,CAAC;QACvB;MACJ;IACJ,CAAC,CAAC;IACF,IAAI,CAACjD,MAAM,CAAC,CAAC;IACb,IAAI,CAACgC,UAAU,CAAC,CAAC;IACjB,MAAM,IAAI,CAACxB,UAAU,CAAC,CAAC;IACvB,IAAI;MACA,MAAM,IAAI,CAAC4B,UAAU,CAAC,CAAC;IAC3B,CAAC,CACD,OAAOwE,CAAC,EAAE;MACN/K,SAAS,CAAC,CAAC,CAACiG,KAAK,CAAC8E,CAAC,CAAC;IACxB;IACA,IAAI,CAACvD,cAAc,CAAC,CAAC;IACrB,IAAI,CAACH,qBAAqB,CAACqD,GAAG,IAAI;MAC9B,IAAI,CAAC,IAAI,CAAChJ,OAAO,IAAI,EAAE,IAAI,CAACA,OAAO,YAAY+F,IAAI,CAAC,EAAE;QAClD;MACJ;MACAiD,GAAG,CAAChD,OAAO,CAAC,IAAI,CAAChG,OAAO,EAAE;QAAEiG,UAAU,EAAE;MAAK,CAAC,CAAC;IACnD,CAAC,CAAC;IACF,IAAI,CAACqD,YAAY,CAAC,CAAC;IACnB,IAAI,CAACC,WAAW,CAAC,CAAC;IAClB,IAAI,CAACtC,KAAK,CAAC,CAAC;EAChB;EACAnB,cAAcA,CAAA,EAAG;IACb,MAAM5C,OAAO,GAAG,IAAI,CAACnC,SAAS,CAACoC,aAAa;MAAEqG,UAAU,GAAGtG,OAAO,CAACsG,UAAU;MAAExJ,OAAO,GAAG,IAAI,CAACA,OAAO;IACrG,IAAI,CAACA,OAAO,EAAE;MACV;IACJ;IACA,MAAMC,YAAY,GAAGD,OAAO,CAACJ,KAAK;IAClC,IAAI,CAACK,YAAY,EAAE;MACf;IACJ;IACA,IAAIuJ,UAAU,CAAClG,KAAK,EAAE;MAClB,MAAMA,KAAK,GAAGpE,eAAe,CAAC,IAAI,CAAC6D,OAAO,EAAEyG,UAAU,CAAClG,KAAK,CAAC;MAC7DrD,YAAY,CAACwJ,eAAe,GAAGnG,KAAK,GAAGtE,eAAe,CAACsE,KAAK,EAAEkG,UAAU,CAAC7F,OAAO,CAAC,GAAG,EAAE;IAC1F,CAAC,MACI;MACD1D,YAAY,CAACwJ,eAAe,GAAG,EAAE;IACrC;IACAxJ,YAAY,CAACyJ,eAAe,GAAGF,UAAU,CAACxF,KAAK,IAAI,EAAE;IACrD/D,YAAY,CAAC0J,kBAAkB,GAAGH,UAAU,CAACI,QAAQ,IAAI,EAAE;IAC3D3J,YAAY,CAAC4J,gBAAgB,GAAGL,UAAU,CAACM,MAAM,IAAI,EAAE;IACvD7J,YAAY,CAAC8J,cAAc,GAAGP,UAAU,CAAChE,IAAI,IAAI,EAAE;EACvD;EACA+D,WAAWA,CAAA,EAAG;IACV,IAAI,CAAChH,cAAc,GAAG,EAAE;IACxB,KAAK,MAAMD,MAAM,IAAI,IAAI,CAACvB,SAAS,CAACiJ,OAAO,CAACC,MAAM,CAAC,CAAC,EAAE;MAAA,IAAAC,qBAAA;MAClD,IAAI5H,MAAM,CAACG,MAAM,EAAE;QACf,IAAI,CAACF,cAAc,CAAC4H,IAAI,CAAC7H,MAAM,CAAC;MACpC;MACA,KAAA4H,qBAAA,GAAI5H,MAAM,CAACQ,iBAAiB,cAAAoH,qBAAA,cAAAA,qBAAA,GAAI5H,MAAM,CAACU,mBAAmB,EAAE;QACxD,IAAI,CAACH,aAAa,CAACsH,IAAI,CAAC7H,MAAM,CAAC;MACnC;IACJ;EACJ;EACAgH,YAAYA,CAAA,EAAG;IACX,IAAI,CAACzH,gBAAgB,GAAG,EAAE;IAC1B,IAAI,CAACT,iBAAiB,GAAG,EAAE;IAC3B,KAAK,MAAMD,OAAO,IAAI,IAAI,CAACJ,SAAS,CAACgE,SAAS,CAACqF,QAAQ,EAAE;MAAA,IAAAC,KAAA,EAAAC,qBAAA;MACrD,IAAInJ,OAAO,CAACG,SAAS,EAAE;QACnB,IAAI,CAACF,iBAAiB,CAAC+I,IAAI,CAAChJ,OAAO,CAAC;MACxC;MACA,KAAAkJ,KAAA,IAAAC,qBAAA,GAAInJ,OAAO,CAACY,cAAc,cAAAuI,qBAAA,cAAAA,qBAAA,GAAInJ,OAAO,CAACe,kBAAkB,cAAAmI,KAAA,cAAAA,KAAA,GAAIlJ,OAAO,CAACiB,UAAU,EAAE;QAC5E,IAAI,CAACP,gBAAgB,CAACsI,IAAI,CAAChJ,OAAO,CAAC;MACvC;IACJ;EACJ;EACAoJ,UAAUA,CAAC5K,MAAM,EAAE;IACf,IAAI,IAAI,CAACqH,UAAU,IAAI,IAAI,CAAChH,OAAO,EAAE;MACjC,IAAI,CAACA,OAAO,CAACoH,MAAM,CAAC,CAAC;IACzB;IACA,IAAI,CAACJ,UAAU,GACXrH,MAAM,CAAC6K,OAAO,IAAI9L,kBAAkB,IAAIiB,MAAM,CAAC6K,OAAO,GAChD7K,MAAM,CAAC6K,OAAO,CAAC9L,kBAAkB,CAAC,KAAK,MAAM,GAC7C,IAAI,CAACsI,UAAU;IACzB,IAAI,CAAChH,OAAO,GAAGL,MAAM;IACrB,IAAI,CAACK,OAAO,CAACyK,UAAU,GAAG,MAAM;IAChC,IAAI,CAACtE,cAAc,GAAG/H,UAAU,CAAC,IAAI,CAAC4B,OAAO,CAACJ,KAAK,CAAC;IACpD,MAAM8K,YAAY,GAAG,IAAI,CAAClE,aAAa;IACvCkE,YAAY,CAACjE,MAAM,GAAG9G,MAAM,CAACgL,YAAY;IACzCD,YAAY,CAAChE,KAAK,GAAG/G,MAAM,CAACiL,WAAW;IACvC,MAAMjE,OAAO,GAAG,IAAI,CAAC5F,SAAS,CAAC6F,MAAM,CAACC,UAAU;MAAEgE,UAAU,GAAG,IAAI,CAACrF,IAAI;IACxE7F,MAAM,CAAC8G,MAAM,GAAGoE,UAAU,CAACpE,MAAM,GAAGiE,YAAY,CAACjE,MAAM,GAAGE,OAAO;IACjEhH,MAAM,CAAC+G,KAAK,GAAGmE,UAAU,CAACnE,KAAK,GAAGgE,YAAY,CAAChE,KAAK,GAAGC,OAAO;IAC9D,IAAI,CAACI,QAAQ,GAAG,IAAI,CAAC/G,OAAO,CAAC8K,UAAU,CAAC,IAAI,CAAC;IAC7C,IAAI,CAACnF,qBAAqB,CAACqD,GAAG,IAAIA,GAAG,CAACnD,UAAU,CAAC,CAAC,CAAC;IACnD,IAAI,CAAC9E,SAAS,CAAC6F,MAAM,CAACmC,IAAI,CAAC,CAAC;IAC5B,IAAI,CAACjD,cAAc,CAAC,CAAC;IACrB,IAAI,CAACH,qBAAqB,CAACqD,GAAG,IAAI;MAC9B,IAAI,CAAC,IAAI,CAAChJ,OAAO,IAAI,EAAE,IAAI,CAACA,OAAO,YAAY+F,IAAI,CAAC,EAAE;QAClD;MACJ;MACAiD,GAAG,CAAChD,OAAO,CAAC,IAAI,CAAChG,OAAO,EAAE;QAAEiG,UAAU,EAAE;MAAK,CAAC,CAAC;IACnD,CAAC,CAAC;EACN;EACAgB,KAAKA,CAAA,EAAG;IACJ,MAAM/D,OAAO,GAAG,IAAI,CAACnC,SAAS,CAACoC,aAAa;IAC5C,IAAI,CAACoC,IAAI,CAAC/D,GAAG,IAAI;MACb,IAAI0B,OAAO,CAACG,cAAc,CAAC6B,MAAM,IAAIhC,OAAO,CAACG,cAAc,CAACD,KAAK,EAAE;QAC/DtF,KAAK,CAAC0D,GAAG,EAAE,IAAI,CAACgE,IAAI,CAAC;QACrB,IAAI,IAAI,CAACnB,WAAW,EAAE;UAClB,IAAI,CAACoB,WAAW,CAAC,IAAI,CAACpB,WAAW,CAACL,KAAK,EAAE,IAAI,CAACK,WAAW,CAACV,OAAO,CAAC;QACtE,CAAC,MACI,IAAI,IAAI,CAACC,gBAAgB,EAAE;UAC5B,IAAI,CAACyB,UAAU,CAAC,IAAI,CAACzB,gBAAgB,CAAC;QAC1C,CAAC,MACI;UACD,IAAI,CAACyB,UAAU,CAAC,CAAC;QACrB;MACJ,CAAC,MACI;QACD,IAAI,CAACA,UAAU,CAAC,CAAC;MACrB;IACJ,CAAC,CAAC;EACN;EACA5C,MAAMA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACzC,OAAO,EAAE;MACf,OAAO,KAAK;IAChB;IACA,MAAMe,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEgK,WAAW,GAAGhK,SAAS,CAACpB,MAAM,CAAC6G,aAAa;MAAEwE,OAAO,GAAG;QACtFtE,KAAK,EAAE,IAAI,CAAC1G,OAAO,CAAC4K,WAAW;QAC/BnE,MAAM,EAAE,IAAI,CAACzG,OAAO,CAAC2K;MACzB,CAAC;MAAEhE,OAAO,GAAG5F,SAAS,CAAC6F,MAAM,CAACC,UAAU;MAAEgE,UAAU,GAAG;QACnDnE,KAAK,EAAEsE,OAAO,CAACtE,KAAK,GAAGC,OAAO;QAC9BF,MAAM,EAAEuE,OAAO,CAACvE,MAAM,GAAGE;MAC7B,CAAC;IACD,IAAIqE,OAAO,CAACvE,MAAM,KAAKsE,WAAW,CAACtE,MAAM,IACrCuE,OAAO,CAACtE,KAAK,KAAKqE,WAAW,CAACrE,KAAK,IACnCmE,UAAU,CAACpE,MAAM,KAAK,IAAI,CAACzG,OAAO,CAACyG,MAAM,IACzCoE,UAAU,CAACnE,KAAK,KAAK,IAAI,CAAC1G,OAAO,CAAC0G,KAAK,EAAE;MACzC,OAAO,KAAK;IAChB;IACA,MAAMuE,OAAO,GAAAxH,aAAA,KAAQsH,WAAW,CAAE;IAClCA,WAAW,CAACtE,MAAM,GAAGuE,OAAO,CAACvE,MAAM;IACnCsE,WAAW,CAACrE,KAAK,GAAGsE,OAAO,CAACtE,KAAK;IACjC,MAAMwE,UAAU,GAAG,IAAI,CAAC1F,IAAI;IAC5B,IAAI,CAACxF,OAAO,CAAC0G,KAAK,GAAGwE,UAAU,CAACxE,KAAK,GAAGmE,UAAU,CAACnE,KAAK;IACxD,IAAI,CAAC1G,OAAO,CAACyG,MAAM,GAAGyE,UAAU,CAACzE,MAAM,GAAGoE,UAAU,CAACpE,MAAM;IAC3D,IAAI,IAAI,CAAC1F,SAAS,CAACoK,OAAO,EAAE;MACxBpK,SAAS,CAACgE,SAAS,CAACqG,eAAe,CAAC;QAChC1E,KAAK,EAAEqE,WAAW,CAACrE,KAAK,GAAGuE,OAAO,CAACvE,KAAK;QACxCD,MAAM,EAAEsE,WAAW,CAACtE,MAAM,GAAGwE,OAAO,CAACxE;MACzC,CAAC,CAAC;IACN;IACA,OAAO,IAAI;EACf;EACAU,IAAIA,CAAA,EAAG;IACH,IAAI,CAACxB,qBAAqB,CAACqD,GAAG,IAAIA,GAAG,CAACnD,UAAU,CAAC,CAAC,CAAC;IACnD,IAAI,CAACQ,iBAAiB,GAAG7G,SAAS;IAClC,IAAI,CAAC+F,IAAI,CAAC/D,GAAG,IAAI1D,KAAK,CAAC0D,GAAG,EAAE,IAAI,CAACgE,IAAI,CAAC,CAAC;EAC3C;EACA,MAAM6F,YAAYA,CAAA,EAAG;IACjB,IAAI,CAAC,IAAI,CAACrL,OAAO,IAAI,CAAC,IAAI,CAACyC,MAAM,CAAC,CAAC,EAAE;MACjC;IACJ;IACA,MAAM1B,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEuK,YAAY,GAAGvK,SAAS,CAACwK,mBAAmB,CAAC,CAAC;IAChFxK,SAAS,CAACgE,SAAS,CAACyG,UAAU,CAAC,CAAC;IAChC,IAAI,CAACnJ,mBAAmB,CAAC,CAAC;IAC1B,IAAIiJ,YAAY,EAAE;MACd,MAAMvK,SAAS,CAAC0K,OAAO,CAAC,CAAC;IAC7B;EACJ;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}